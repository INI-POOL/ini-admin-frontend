{"version":3,"file":"date-Cf0mn9XG.js","sources":["../../src/utils/date.ts"],"sourcesContent":["/**\n * 将时间戳转换为日期时间字符串\n * @param timestamp 时间戳（秒或毫秒）\n * @param format 日期格式，默认 'YYYY-MM-DD HH:mm:ss'\n * @returns 格式化后的日期字符串\n */\nexport function formatDateTime(\n  timestamp: number | string,\n  format: string = \"YYYY-MM-DD HH:mm:ss\",\n): string {\n  if (!timestamp) {\n    return \"-\";\n  }\n\n  // 转换为数字\n  const ts = Number(timestamp);\n\n  // 处理秒级时间戳\n  const date = new Date(ts < 10000000000 ? ts * 1000 : ts);\n\n  if (isNaN(date.getTime())) {\n    return \"-\";\n  }\n\n  const year = date.getFullYear();\n  const month = padZero(date.getMonth() + 1);\n  const day = padZero(date.getDate());\n  const hours = padZero(date.getHours());\n  const minutes = padZero(date.getMinutes());\n  const seconds = padZero(date.getSeconds());\n\n  return format\n    .replace(\"YYYY\", year.toString())\n    .replace(\"MM\", month)\n    .replace(\"DD\", day)\n    .replace(\"HH\", hours)\n    .replace(\"mm\", minutes)\n    .replace(\"ss\", seconds);\n}\n\nexport function formatReleaseTime(timeStr) {\n    // 处理默认无效时间\n    if (timeStr === '0001-01-01T00:00:00Z') return '--';\n    \n    // 创建Date对象（自动处理时区）\n    const date = new Date(timeStr);\n    \n    // 提取时间组件（注意时区处理）\n    const year = date.getFullYear();\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    const day = date.getDate().toString().padStart(2, '0');\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    const seconds = date.getSeconds().toString().padStart(2, '0');\n    \n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\nexport function convertDateTime(isoString: string): string {\n    const date = new Date(isoString);\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // 月份从0开始，需要加1\n    const day = String(date.getDate()).padStart(2, '0');\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const seconds = String(date.getSeconds()).padStart(2, '0');\n    \n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\nexport function timestampToFormattedTime(timestamp: number): string {\n    // 创建 Date 对象\n    const date = new Date(timestamp*1000);\n    // 获取年、月、日、时、分、秒\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // 月份从 0 开始，需要加 1\n    const day = String(date.getDate()).padStart(2, '0');\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const seconds = String(date.getSeconds()).padStart(2, '0');\n\n    // 拼接成目标格式\n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\nexport function convertDateTimeToDate(isoString: string): string {\n    const date = new Date(isoString);\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // 月份从0开始，需要加1\n    const day = String(date.getDate()).padStart(2, '0');\n    \n    return `${year}-${month}-${day}`;\n}\n\nexport function getColumns(currency) {\n  const baseColumns = [\n    { key: 'uid', label: '用户UID' },\n    { key: 'sub_user_name', label: '子账户名' },\n    { key: 'day_profits', label: '分配收益' },\n    { key: 'fees', label: '手续费' }\n  ]\n  \n  return currency === 'ltc'\n    ? [...baseColumns, { key: 'currency', label: '币种' }]\n    : [...baseColumns, { key: 'machines', label: '机器数' }]\n}\n\nfunction getLowLevelUnit(unit: string): string {\n\tif (unit === 'EH/s') {\n\t\treturn 'PH/s'\n\t}else if (unit === 'PH/s') {\n\t\treturn 'TH/s'\n\t}else if (unit === 'TH/s') {\n\t\treturn 'GH/s'\n\t}else if (unit === 'GH/s') {\n\t\treturn 'MH/s'\n\t}else if (unit === 'MH/s') {\n\t\treturn 'kH/s'\n\t}else if (unit === 'kH/s') {\n\t\treturn 'H/s'\n\t}\n\n\treturn 'H/s'\n}\n\nexport function\tformatHashRate(hashRate: number): string {\n\t\tlet unit = '';\n\t\tlet formattedValue = hashRate;\n\n\t\t// 根据算力的大小选择单位\n\t\tif (hashRate >= 1e18) {\n\t\t\tunit = 'EH/s';\n\t\t\tformattedValue = hashRate / 1e18;\n\t\t} else if (hashRate >= 1e15) {\n\t\t\tunit = 'PH/s';\n\t\t\tformattedValue = hashRate / 1e15;\n\t\t} else if (hashRate >= 1e12) {\n\t\t\tunit = 'TH/s';\n\t\t\tformattedValue = hashRate / 1e12;\n\t\t} else if (hashRate >= 1e9) {\n\t\t\tunit = 'GH/s';\n\t\t\tformattedValue = hashRate / 1e9;\n\t\t} else if (hashRate >= 1e6) {\n\t\t\tunit = 'MH/s';\n\t\t\tformattedValue = hashRate / 1e6;\n\t\t} else if (hashRate >= 1e3) {\n\t\t\tunit = 'kH/s';\n\t\t\tformattedValue = hashRate / 1e3;\n\t\t} else {\n\t\t\tunit = 'H/s';\n\t\t}\n\n\t\t// 保留两位小数，确保值大于 0.1\n\t\tformattedValue = Math.round(formattedValue * 100) / 100;\n\t\t\n\t\tif (formattedValue < 8) {\n\t\t\tformattedValue = formattedValue * 1e3\n\t\t\tunit = getLowLevelUnit(unit)\n\t\t}\n\t\t\t\n\t\treturn formattedValue.toFixed(2) + ' ' + unit;\n}\n\n// 获取昨日日期 (返回Date对象)\nexport const getYesterdayDate = (): Date => {\n  const date = new Date()\n  date.setDate(date.getDate() - 1)\n  return date\n}\n\nexport const getYesterday = (offsetHours: number = 0): Date => {\n  const now: Date = new Date();\n  \n  // 调整时区偏移（将时间对齐到目标时区的0点）\n  const adjusted: Date = new Date(now.getTime() - offsetHours * 60 * 60 * 1000);\n  adjusted.setHours(0, 0, 0, 0); // 标准化到目标时区当日0点\n  adjusted.setDate(adjusted.getDate() - 1); // 计算\"昨日\"\n  \n  return adjusted;\n};\n\n// 日期格式化 (包含完整类型定义)\nexport const formatDateToYYYYMMDD = (date: Date | null | undefined): string => {\n  if (!(date instanceof Date) || isNaN(date.getTime())) {\n    return ''\n  }\n  \n  const year = date.getFullYear()\n  const month = String(date.getMonth() + 1).padStart(2, '0')\n  const day = String(date.getDate()).padStart(2, '0')\n  \n  return `${year}-${month}-${day}`\n}\n\nexport const isDateDisabled = (date: Date): boolean => {\n  const today = new Date()\n  today.setHours(0, 0, 0, 0) // 清除时间部分\n\n  // 定义二期开始日期\n  const phase2Start = new Date('2025-02-27')\n  phase2Start.setHours(0, 0, 0, 0)\n\n  // 处理比较日期\n  const compareDate = new Date(date)\n  compareDate.setHours(0, 0, 0, 0)\n\n  // 判断逻辑\n  return compareDate < phase2Start ||    // 早于2025-02-27\n         compareDate >= today           // 今天及以后\n}\n\n// 可选：处理字符串转Date (安全转换)\nexport const safeStringToDate = (dateString: string): Date | null => {\n  const timestamp = Date.parse(dateString)\n  return isNaN(timestamp) ? null : new Date(timestamp)\n}\n\n/**\n * 数字补零\n * @param num 需要补零的数字\n * @returns 补零后的字符串\n */\nfunction padZero(num: number): string {\n  return num < 10 ? `0${num}` : num.toString();\n}\n\n/**\n * 获取相对时间描述\n * @param timestamp 时间戳\n * @returns 相对时间描述\n */\nexport function getRelativeTime(timestamp: number | string): string {\n  if (!timestamp) {\n    return \"-\";\n  }\n\n  const ts = Number(timestamp);\n  const date = new Date(ts < 10000000000 ? ts * 1000 : ts);\n  const now = new Date();\n  const diff = now.getTime() - date.getTime();\n\n  const minute = 60 * 1000;\n  const hour = 60 * minute;\n  const day = 24 * hour;\n\n  if (diff < minute) {\n    return \"刚刚\";\n  } else if (diff < hour) {\n    return `${Math.floor(diff / minute)}分钟前`;\n  } else if (diff < day) {\n    return `${Math.floor(diff / hour)}小时前`;\n  } else if (diff < 7 * day) {\n    return `${Math.floor(diff / day)}天前`;\n  } else {\n    return formatDateTime(timestamp, \"YYYY-MM-DD\");\n  }\n}\n\n"],"names":["formatDateTime","timestamp","format","ts","date","year","month","padZero","day","hours","minutes","seconds","formatReleaseTime","timeStr","timestampToFormattedTime","convertDateTimeToDate","isoString","getColumns","currency","baseColumns","getLowLevelUnit","unit","formatHashRate","hashRate","formattedValue","getYesterday","offsetHours","now","adjusted","isDateDisabled","today","phase2Start","compareDate","num"],"mappings":"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"}